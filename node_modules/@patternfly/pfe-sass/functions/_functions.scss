@function pfe-strip-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
      @return $number / ($number * 0 + 1);
    }
  
    @return $number;
  }

@function pfe-size-pem($pxval, $base: $pfe-global--font-size-root) {
    @return pfe-strip-unit($pxval) / $base * 1em;
}

@function pfe-size-prem($pxval, $base: $pfe-global--font-size-root) {
    @return pfe-strip-unit($pxval) / $base * 1rem;
}

@function pfe-size-rem2px($remval, $base: $pfe-global--font-size-root) {
    @return pfe-strip-unit($remval) * ($base / 1px);
}

/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        @if type-of($map)=="map" {
            $map: map-get($map, $key);
        }

        @else {
            @warn "Map provided is not a map."
        }
    }

    @return $map;
}

// Collect all maps and merge them together
@function map-collect($maps...) {
    $collection: ();

    @each $map in $maps {
        $collection: map-merge($collection, $map);
    }

    @return $collection;
}

// New color function to only return theme colors
@function color($name, $theme: "light", $opacity: 1) {
    $map: map-get($color-map, $name);
    $error: false;
    $color: null;

    @if $map !=null {
        $color: map-get($map, $theme);
    }

    @else {
        $error: true;
    }

    @if type-of($color)==color {
        @if $opacity==1 {
            @return $color;
        }

        @if $opacity < 1 {
            @return rgba($color, $opacity);
        }
    }

    @else {
        $error: true;
    }

    @if $error {
        @warn "#{$name} is not a valid color";
    }
}

// https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
// Get the first item in a list
@function first($list) {
    @return nth($list, 1);
}

// Get the last item in a list
@function last($list) {
    @return nth($list, length($list));
}

@function str-replace($string, $search, $replace: "") {
    @if type-of($string)=="string"and type-of($search)=="string" {
        $index: str-index($string, $search);

        @if $index {
            @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
        }
    }

    @return $string;
}

@function to-string($list, $glue: '', $is-nested: false) {
    $result: null;

    @for $i from 1 through length($list) {
        $e: nth($list, $i);

        @if type-of($e)==list {
            $result: $result#{to-string($e, $glue, true)};
        }

        @else {
            $result: if($i !=length($list) or $is-nested,
            $result#{$e}#{$glue},
            $result#{$e});
        }
    }

    @return $result;
}

@function str-split($string, $separator) {
    // empty array/list
    $split-arr: ();
    // first index of separator in string
    $index: str-index("#{$string}", $separator);

    // loop through string
    @while $index !=null {
        // get the substring from the first character to the separator
        $item: str-slice($string, 1, $index - 1);
        // push item to array
        $split-arr: append($split-arr, $item);
        // remove item and separator from string
        $string: str-slice($string, $index + 1);
        // find new index of separator
        $index: str-index($string, $separator);
    }

    // add the remaining string to list (the last item) and return
    @return append($split-arr, $string);
}

// https://github.com/HugoGiraudel/SassyStrings/blob/master/dist/_SassyStrings.scss
/// Remove all trailing and leading whitespaces from `$string`.
/// @since 1.2.0
/// @param {String} $string - string
/// @return {String}

@function str-trim($string) {
    $start: 1;
    $end: str-length($string);

    @for $i from 1 through str-length($string) {
        $first: str-slice($string, $i, $i);
        $last: str-slice($string, -$i, -$i);

        @if $first==" "and $i+1==$start+1 {
            $start: $i + 1;
        }

        @if $last==" "and str-length($string) - $i==$end - 1 {
            $end: str-length($string) - $i;
        }
    }

    @return str-slice($string, $start, $end);
}

// https://github.com/HugoGiraudel/SassyStrings/blob/master/dist/_SassyStrings.scss
/// Check whether `$string` stars with `$needle`.
/// @param {String} $string - string to check
/// @param {String} $needle - substring to check
/// @return {Bool}

@function str-starts-with($string, $needle) {
    @return str-slice($string, 1, str-length($needle))==$needle;
}

// https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#removing-values-from-list
@function remove($list, $value, $recursive: false) {
    $result: ();

    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i))==list and $recursive {
            $result: append($result, remove(nth($list, $i), $value, $recursive));
        }

        @else if nth($list, $i) !=$value {
            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}



/// Var
///
/// Returns CSS Var stack with exposed theme Var and respective SCSS fallback
///
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme
/// @param {String} $category - Category name to be appended to variables within the map/system
/// @param {Map} $map - SASS Map of variables
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @use -
///
///     1.look up a color: /elements/pfe-sass/variables/_maps.scss
///         (FYI, maps references: /elements/pfe-sass/variables/_colors.scss)
///
///     2. use like this:
///         ```
///         .my-element {
///           padding:     #{pfe-var(  container-spacer  )};
///           font-size:   #{pfe-var(  font-size  )};
///         }
///         ```
@function pfe-var($cssvar, $category: '', $fallback: null, $map: $pfe-vars) {
    $css-var-with-cat: $cssvar;

    @if $category !="" {
        $category: "#{$category}--";
        $css-var-with-cat: "#{$category}#{$cssvar}";
    }
    // Start building the variable declaration
    $var-declaration: "--#{$repo}-theme--#{$category}#{$cssvar}";

    // If a fallback is defined, pass that in too
    @if $fallback = null and map-get($map, $cssvar) != null {
        @if $fallback == null {
            $fallback: map-get($map, $css-var-with-cat);
        }
        $var-declaration: "#{$var-declaration}, #{$fallback}";
    }
    // Return the variable declaration string
    @return var(#{$var-declaration});
}


/// Var Fallback
///
/// Returns the SCSS fallback value only
///
/// @param {String} $size - Variable name to be used and prepended with --pfe-theme
/// @use -
/// ```
/// @media screen and (min-width: pfe-breakpoint(sm)) {
///    --pfe-band--width: #{pfe-breakpoint(sm) - $box-padding * 2};
/// }
/// ```
@function pfe-breakpoint($size, $max: false) {
    $bp: map-get($pfe-vars, grid-breakpoint--#{$size});
    @if $max {
        $bp: (pfe-strip-unit($bp) - 1) * 1px;
    }
    @return $bp;
}

/// Color
///
/// Returns CSS Var stack with exposed theme Var and respective SCSS fallback
///
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme
/// @param {String} $category - Category name to be appended to variables within the map/system, default is "color"
/// @param {Map} $map - SASS Map of variables
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @use -
///
///     1.look up a color: /elements/pfe-sass/variables/_maps.scss
///         (FYI, maps references: /elements/pfe-sass/variables/_colors.scss)
///
///     2. use like this:
///         ```
///         .my-element {
///           color:       #{pfe-color(  surface--base--text  )};
///           background:  #{pfe-color(  surface--base )};
///         }
///         ```
@function pfe-color($cssvar, $category: 'color', $map: $pfe-colors) {
    @if $category !="" {
        $category: "#{$category}--";
    }
    // Start building the variable declaration
    $var-declaration: "--#{$repo}-theme--#{$category}#{$cssvar}";
    // If a fallback is defined, pass that in too
    @if map-get($map, $cssvar) != null {
        $var-declaration: "#{$var-declaration}, #{map-get($map, $cssvar)}";
    }
    // Return the variable declaration string
    @return var(#{$var-declaration});
}

@function pfe-fallback($cssvar, $category: 'color', $map: $pfe-colors) {
    @if $category !="" {
        $category: "#{$category}--";
    }
    // Return the variable declaration string
    @return #{map-get($map, $cssvar)};
}

/// Local
///
/// Returns CSS Var for the local component-scoped variable
///
/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component
/// @use -
///     ```
///     :host {
///         padding-top:      #{pfe-local(paddingTop`)};
///         padding-bottom:   #{pfe-local(paddingBottom)};
///     }
///     ```
@function pfe-local($cssvar, $fallback: null, $region: null) {
    // If a region value exists, build the region string
    @if $region != null {
        $region: "__#{$region}";
    }
    // Start building the variable declaration
    $var-declaration: "--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}";
    // If a fallback is defined, pass that in too
    @if $fallback != null {
        $var-declaration: "#{$var-declaration}, #{$fallback}";
    }
    // Return the variable declaration string
    @return var(#{$var-declaration});
}

/// Radio
///
/// Returns CSS Var for a broadcasted variable
///
/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'
/// @param {Boolean} $USE-FALLBACK - global default is false; by setting this global var to true, adds fallbacks to broadcasted variables
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @use -
///     ```
///     a:visited {
///         color:       #{pfe-radio(  color, ui-link, visited  )};
///     }
///     ```
///
/// @returns - var(--pfe-broadcasted--color--ui-link--visited);
///
@function pfe-radio($cssvar...) {
    $fallback: "";
    $varname: #{to-string($cssvar, '--')};
    @if $USE-FALLBACK {
        @if str-starts-with($varname, "color") {
            $cssvar: remove($cssvar, "color");
            $fallback: map-get($pfe-colors, #{to-string($cssvar, '--')});
        }
        @else if str-starts-with($varname, "ui") {
            $fallback: map-get($pfe-colors, #{to-string($cssvar, '--')});
        }
        @else {
            $fallback: map-get($pfe-vars, $varname);
        }
    }

    @if $fallback != "" {
        @return var(--#{$repo}-broadcasted--#{$varname}, $fallback);
    }
    @else {
        @return var(--#{$repo}-broadcasted--#{$varname});
    }
}