{"version":3,"file":"pfelement.min.js","sources":["../_temp/reveal.js","../_temp/pfelement.js"],"sourcesContent":["let logger = () => null;\n\nexport function reveal() {\n  logger(`[reveal] elements ready, revealing the body`);\n  window.document.body.removeAttribute(\"unresolved\");\n}\n\nexport function autoReveal(logFunction) {\n  logger = logFunction;\n  // If Web Components are already ready, run the handler right away.  If they\n  // are not yet ready, wait.\n  //\n  // see https://github.com/github/webcomponentsjs#webcomponents-loaderjs for\n  // info about web component readiness events\n  const polyfillPresent = window.WebComponents;\n  const polyfillReady = polyfillPresent && window.WebComponents.ready;\n\n  if (!polyfillPresent || polyfillReady) {\n    handleWebComponentsReady();\n  } else {\n    window.addEventListener(\"WebComponentsReady\", handleWebComponentsReady);\n  }\n}\n\nfunction handleWebComponentsReady() {\n  logger(\"[reveal] web components ready\");\n  reveal();\n}\n","/*!\n * PatternFly Elements: PFElement 1.0.0-prerelease.28\n * @license\n * Copyright 2019 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport { autoReveal } from \"./reveal.js\";\nconst prefix = \"pfe-\";\n\nclass PFElement extends HTMLElement {\n  static create(pfe) {\n    window.customElements.define(pfe.tag, pfe);\n  }\n\n  static debugLog(preference = null) {\n    if (preference !== null) {\n      PFElement._debugLog = !!preference;\n    }\n    return PFElement._debugLog;\n  }\n\n  static log(...msgs) {\n    if (PFElement.debugLog()) {\n      console.log(...msgs);\n    }\n  }\n\n  static get PfeTypes() {\n    return {\n      Container: \"container\",\n      Content: \"content\",\n      Combo: \"combo\"\n    };\n  }\n\n  static get version() {\n    return \"{{version}}\";\n  }\n  \n  static get randomId() {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  get version() {\n    return this._pfeClass.version;\n  }\n\n  get pfeType() {\n    return this.getAttribute(`${prefix}type`);\n  }\n\n  set pfeType(value) {\n    this.setAttribute(`${prefix}type`, value);\n  }\n\n  // Returns a single element assigned to that slot; if multiple, it returns the first\n  has_slot(name) {\n    return this.querySelector(`[slot='${name}']`);\n  }\n\n  // Returns an array with all elements assigned to that slot\n  has_slots(name) {\n    return [...this.querySelectorAll(`[slot='${name}']`)];\n  }\n\n  constructor(pfeClass, { type = null, delayRender = false } = {}) {\n    super();\n\n    this.connected = false;\n    this._pfeClass = pfeClass;\n    this.tag = pfeClass.tag;\n    this.props = pfeClass.properties;\n    this.slots = pfeClass.slots;\n    this._queue = [];\n    this.template = document.createElement(\"template\");\n    \n    this.log(`Constructing...`);\n\n    this.attachShadow({ mode: \"open\" });\n\n    if (type) {\n      this._queueAction({\n        type: \"setProperty\",\n        data: {\n          name: \"pfeType\",\n          value: type\n        }\n      });\n    }\n\n    if (!delayRender) {\n      this.log(`Render...`);\n      this.render();\n      this.log(`Rendered.`);\n    }\n    \n    this.log(`Constructed.`);\n  }\n\n  connectedCallback() {\n    this.connected = true;\n    this.log(`Connecting...`);\n\n    if (window.ShadyCSS) {\n      this.log(`Styling...`);\n      window.ShadyCSS.styleElement(this);\n      this.log(`Styled.`);\n    }\n\n    // @TODO maybe we should use just the attribute instead of the class?\n    // https://github.com/angular/angular/issues/15399#issuecomment-318785677\n    this.classList.add(\"PFElement\");\n    this.setAttribute(\"pfelement\", \"\");\n\n    if (typeof this.props === \"object\") {\n      this._mapSchemaToProperties(this.tag, this.props);\n      this.log(`Properties attached.`);\n    }\n\n    if (typeof this.slots === \"object\") {\n      this._mapSchemaToSlots(this.tag, this.slots);\n      this.log(`Slots attached.`);\n    }\n\n    if (this._queue.length) {\n      this._processQueue();\n    }\n\n    this.log(`Connected.`);\n  }\n\n  disconnectedCallback() {\n    this.log(`Disconnecting...`);\n\n    this.connected = false;\n    \n    this.log(`Disconnected.`);\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    if (!this._pfeClass.cascadingAttributes) {\n      return;\n    }\n\n    const cascadeTo = this._pfeClass.cascadingAttributes[attr];\n    if (cascadeTo) {\n      this._copyAttribute(attr, cascadeTo);\n    }\n  }\n\n  _copyAttribute(name, to) {\n    const recipients = [\n      ...this.querySelectorAll(to),\n      ...this.shadowRoot.querySelectorAll(to)\n    ];\n    const value = this.getAttribute(name);\n    const fname = value == null ? \"removeAttribute\" : \"setAttribute\";\n    for (const node of recipients) {\n      node[fname](name, value);\n    }\n  }\n\n  // Map the imported properties json to real props on the element\n  // @notice static getter of properties is built via tooling\n  // to edit modify src/element.json\n  _mapSchemaToProperties(tag, properties) {\n    this.log(\"Mapping properties...\");\n    // Loop over the properties provided by the schema\n    Object.keys(properties).forEach(attr => {\n      let data = properties[attr];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof data === \"object\") {\n        // Prefix default is true\n        let hasPrefix = true;\n        let attrName = attr;\n        // Set the attribute's property equal to the schema input\n        this[attr] = data;\n        // Initialize the value to null\n        this[attr].value = null;\n\n        if (typeof this[attr].prefixed !== \"undefined\") {\n          hasPrefix = this[attr].prefixed;\n        }\n\n        if (hasPrefix) {\n          attrName = `${prefix}${attr}`;\n        }\n\n        // If the attribute exists on the host\n        if (this.hasAttribute(attrName)) {\n          // Set property value based on the existing attribute\n          this[attr].value = this.getAttribute(attrName);\n        }\n        // Otherwise, look for a default and use that instead\n        else if (data.default) {\n          const dependency_exists = this._hasDependency(tag, data.options);\n          const no_dependencies =\n            !data.options || (data.options && !data.options.dependencies.length);\n          // If the dependency exists or there are no dependencies, set the default\n          if (dependency_exists || no_dependencies) {\n            this.setAttribute(attrName, data.default);\n            this[attr].value = data.default;\n          }\n        }\n      }\n    });\n\n    this.log(\"Properties mapped.\");\n  }\n\n  // Test whether expected dependencies exist\n  _hasDependency(tag, opts) {\n    // Get any possible dependencies for this attribute to exist\n    let dependencies = opts ? opts.dependencies : [];\n    // Initialize the dependency return value\n    let hasDependency = false;\n    // Check that dependent item exists\n    // Loop through the dependencies defined\n    for (let i = 0; i < dependencies.length; i += 1) {\n      const slot_exists =\n        dependencies[i].type === \"slot\" &&\n        this.has_slots(`${tag}--${dependencies[i].id}`).length > 0;\n      const attribute_exists =\n        dependencies[i].type === \"attribute\" &&\n        this.getAttribute(`${prefix}${dependencies[i].id}`);\n      // If the type is slot, check that it exists OR\n      // if the type is an attribute, check if the attribute is defined\n      if (slot_exists || attribute_exists) {\n        // If the slot does exist, add the attribute with the default value\n        hasDependency = true;\n        // Exit the loop\n        break;\n      }\n    }\n    // Return a boolean if the dependency exists\n    return hasDependency;\n  }\n\n  // Map the imported slots json\n  // @notice static getter of properties is built via tooling\n  // to edit modify src/element.json\n  _mapSchemaToSlots(tag, slots) {\n    this.log(\"Validate slots...\");\n    // Loop over the properties provided by the schema\n    Object.keys(slots).forEach(slot => {\n      let slotObj = slots[slot];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof slotObj === \"object\") {\n        let slotExists = false;\n        let result = [];\n        // If it's a named slot, look for that slot definition\n        if (slotObj.namedSlot) {\n          // Check prefixed slots\n          result = this.has_slots(`${tag}--${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n\n          // Check for unprefixed slots\n          result = this.has_slots(`${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n          // If it's the default slot, look for direct children not assigned to a slot\n        } else {\n          result = [...this.children].filter(child => !child.hasAttribute(\"slot\"));\n          \n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n        }\n\n        // If the slot exists, attach an attribute to the parent to indicate that\n        if (slotExists) {\n          this.setAttribute(`has_${slot}`, \"\");\n        } else {\n          this.removeAttribute(`has_${slot}`);\n        }\n      }\n    });\n    this.log(\"Slots validated.\")\n  }\n\n  _queueAction(action) {\n    this._queue.push(action);\n  }\n\n  _processQueue() {\n    this._queue.forEach(action => {\n      this[`_${action.type}`](action.data);\n    });\n\n    this._queue = [];\n  }\n\n  _setProperty({ name, value }) {\n    this[name] = value;\n  }\n\n  static var(name, element = document.body) {\n    return window\n      .getComputedStyle(element)\n      .getPropertyValue(name)\n      .trim();\n  }\n\n  var(name) {\n    return PFElement.var(name, this);\n  }\n\n  render() {\n    this.shadowRoot.innerHTML = \"\";\n    this.template.innerHTML = this.html;\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(this.template, this.tag);\n    }\n\n    this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n  }\n\n  log(...msgs) {\n    PFElement.log(`[${this.tag}]`, ...msgs);\n  }\n}\n\nautoReveal(PFElement.log);\n\nexport default PFElement;\n"],"names":["logger","handleWebComponentsReady","window","document","body","removeAttribute","prefix","PFElement","HTMLElement","[object Object]","pfe","customElements","define","tag","preference","_debugLog","msgs","debugLog","console","log","PfeTypes","Container","Content","Combo","version","randomId","Math","random","toString","substr","this","_pfeClass","pfeType","getAttribute","value","setAttribute","name","querySelector","querySelectorAll","pfeClass","type","delayRender","super","connected","props","properties","slots","_queue","template","createElement","attachShadow","mode","_queueAction","data","render","ShadyCSS","styleElement","classList","add","_mapSchemaToProperties","_mapSchemaToSlots","length","_processQueue","attr","oldVal","newVal","cascadingAttributes","cascadeTo","_copyAttribute","to","recipients","shadowRoot","fname","node","Object","keys","forEach","hasPrefix","attrName","prefixed","hasAttribute","default","dependency_exists","_hasDependency","options","no_dependencies","dependencies","opts","hasDependency","i","slot_exists","has_slots","id","attribute_exists","slot","slotObj","slotExists","result","namedSlot","nodes","children","filter","child","action","push","element","getComputedStyle","getPropertyValue","trim","var","innerHTML","html","prepareTemplate","appendChild","content","cloneNode","logFunction","polyfillPresent","WebComponents","polyfillReady","ready","addEventListener","autoReveal"],"mappings":"AAAA,IAAIA,EAAS,IAAM,KAwBnB,SAASC,IACPD,EAAO,iCAtBPA,EAAO,+CACPE,OAAOC,SAASC,KAAKC,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;ECsBvC,MAAMC,EAAS,OAEf,MAAMC,UAAkBC,YACtBC,cAAcC,GACZR,OAAOS,eAAeC,OAAOF,EAAIG,IAAKH,GAGxCD,gBAAgBK,EAAa,MAI3B,OAHmB,OAAfA,IACFP,EAAUQ,YAAcD,GAEnBP,EAAUQ,UAGnBN,cAAcO,GACRT,EAAUU,YACZC,QAAQC,OAAOH,GAInBI,sBACE,MAAO,CACLC,UAAW,YACXC,QAAS,UACTC,MAAO,SAIXC,qBACE,MAAO,cAGTC,sBACE,OAAOC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GAG9CL,cACE,OAAOM,KAAKC,UAAUP,QAGxBQ,cACE,OAAOF,KAAKG,gBAAgB3B,SAG9B0B,YAAYE,GACVJ,KAAKK,gBAAgB7B,QAAc4B,GAIrCzB,SAAS2B,GACP,OAAON,KAAKO,wBAAwBD,OAItC3B,UAAU2B,GACR,MAAO,IAAIN,KAAKQ,2BAA2BF,QAG7C3B,YAAY8B,GAAUC,KAAEA,EAAO,KAAIC,YAAEA,GAAc,GAAU,IAC3DC,QAEAZ,KAAKa,WAAY,EACjBb,KAAKC,UAAYQ,EACjBT,KAAKjB,IAAM0B,EAAS1B,IACpBiB,KAAKc,MAAQL,EAASM,WACtBf,KAAKgB,MAAQP,EAASO,MACtBhB,KAAKiB,OAAS,GACdjB,KAAKkB,SAAW7C,SAAS8C,cAAc,YAEvCnB,KAAKX,IAAI,mBAETW,KAAKoB,aAAa,CAAEC,KAAM,SAEtBX,GACFV,KAAKsB,aAAa,CAChBZ,KAAM,cACNa,KAAM,CACJjB,KAAM,UACNF,MAAOM,KAKRC,IACHX,KAAKX,IAAI,aACTW,KAAKwB,SACLxB,KAAKX,IAAI,cAGXW,KAAKX,IAAI,gBAGXV,oBACEqB,KAAKa,WAAY,EACjBb,KAAKX,IAAI,iBAELjB,OAAOqD,WACTzB,KAAKX,IAAI,cACTjB,OAAOqD,SAASC,aAAa1B,MAC7BA,KAAKX,IAAI,YAKXW,KAAK2B,UAAUC,IAAI,aACnB5B,KAAKK,aAAa,YAAa,IAEL,iBAAfL,KAAKc,QACdd,KAAK6B,uBAAuB7B,KAAKjB,IAAKiB,KAAKc,OAC3Cd,KAAKX,IAAI,yBAGe,iBAAfW,KAAKgB,QACdhB,KAAK8B,kBAAkB9B,KAAKjB,IAAKiB,KAAKgB,OACtChB,KAAKX,IAAI,oBAGPW,KAAKiB,OAAOc,QACd/B,KAAKgC,gBAGPhC,KAAKX,IAAI,cAGXV,uBACEqB,KAAKX,IAAI,oBAETW,KAAKa,WAAY,EAEjBb,KAAKX,IAAI,iBAGXV,yBAAyBsD,EAAMC,EAAQC,GACrC,IAAKnC,KAAKC,UAAUmC,oBAClB,OAGF,MAAMC,EAAYrC,KAAKC,UAAUmC,oBAAoBH,GACjDI,GACFrC,KAAKsC,eAAeL,EAAMI,GAI9B1D,eAAe2B,EAAMiC,GACnB,MAAMC,EAAa,IACdxC,KAAKQ,iBAAiB+B,MACtBvC,KAAKyC,WAAWjC,iBAAiB+B,IAEhCnC,EAAQJ,KAAKG,aAAaG,GAC1BoC,EAAiB,MAATtC,EAAgB,kBAAoB,eAClD,IAAK,MAAMuC,KAAQH,EACjBG,EAAKD,GAAOpC,EAAMF,GAOtBzB,uBAAuBI,EAAKgC,GAC1Bf,KAAKX,IAAI,yBAETuD,OAAOC,KAAK9B,GAAY+B,QAAQb,IAC9B,IAAIV,EAAOR,EAAWkB,GAGtB,GAAoB,iBAATV,EAAmB,CAE5B,IAAIwB,GAAY,EACZC,EAAWf,EAef,GAbAjC,KAAKiC,GAAQV,EAEbvB,KAAKiC,GAAM7B,MAAQ,UAEgB,IAAxBJ,KAAKiC,GAAMgB,WACpBF,EAAY/C,KAAKiC,GAAMgB,UAGrBF,IACFC,KAAcxE,IAASyD,KAIrBjC,KAAKkD,aAAaF,GAEpBhD,KAAKiC,GAAM7B,MAAQJ,KAAKG,aAAa6C,QAGlC,GAAIzB,EAAK4B,QAAS,CACrB,MAAMC,EAAoBpD,KAAKqD,eAAetE,EAAKwC,EAAK+B,SAClDC,GACHhC,EAAK+B,SAAY/B,EAAK+B,UAAY/B,EAAK+B,QAAQE,aAAazB,QAE3DqB,GAAqBG,KACvBvD,KAAKK,aAAa2C,EAAUzB,EAAK4B,SACjCnD,KAAKiC,GAAM7B,MAAQmB,EAAK4B,aAMhCnD,KAAKX,IAAI,sBAIXV,eAAeI,EAAK0E,GAElB,IAAID,EAAeC,EAAOA,EAAKD,aAAe,GAE1CE,GAAgB,EAGpB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAazB,OAAQ4B,GAAK,EAAG,CAC/C,MAAMC,EACqB,SAAzBJ,EAAaG,GAAGjD,MAChBV,KAAK6D,aAAa9E,MAAQyE,EAAaG,GAAGG,MAAM/B,OAAS,EACrDgC,EACqB,cAAzBP,EAAaG,GAAGjD,MAChBV,KAAKG,gBAAgB3B,IAASgF,EAAaG,GAAGG,MAGhD,GAAIF,GAAeG,EAAkB,CAEnCL,GAAgB,EAEhB,OAIJ,OAAOA,EAMT/E,kBAAkBI,EAAKiC,GACrBhB,KAAKX,IAAI,qBAETuD,OAAOC,KAAK7B,GAAO8B,QAAQkB,IACzB,IAAIC,EAAUjD,EAAMgD,GAGpB,GAAuB,iBAAZC,EAAsB,CAC/B,IAAIC,GAAa,EACbC,EAAS,GAETF,EAAQG,YAEVD,EAASnE,KAAK6D,aAAa9E,MAAQiF,MACxBjC,OAAS,IAClBkC,EAAQI,MAAQF,EAChBD,GAAa,IAIfC,EAASnE,KAAK6D,aAAaG,MAChBjC,OAAS,IAClBkC,EAAQI,MAAQF,EAChBD,GAAa,KAIfC,EAAS,IAAInE,KAAKsE,UAAUC,OAAOC,IAAUA,EAAMtB,aAAa,UAErDnB,OAAS,IAClBkC,EAAQI,MAAQF,EAChBD,GAAa,GAKbA,EACFlE,KAAKK,oBAAoB2D,IAAQ,IAEjChE,KAAKzB,uBAAuByF,QAIlChE,KAAKX,IAAI,oBAGXV,aAAa8F,GACXzE,KAAKiB,OAAOyD,KAAKD,GAGnB9F,gBACEqB,KAAKiB,OAAO6B,QAAQ2B,IAClBzE,SAASyE,EAAO/D,QAAQ+D,EAAOlD,QAGjCvB,KAAKiB,OAAS,GAGhBtC,cAAa2B,KAAEA,EAAIF,MAAEA,IACnBJ,KAAKM,GAAQF,EAGfzB,WAAW2B,EAAMqE,EAAUtG,SAASC,MAClC,OAAOF,OACJwG,iBAAiBD,GACjBE,iBAAiBvE,GACjBwE,OAGLnG,IAAI2B,GACF,OAAO7B,EAAUsG,IAAIzE,EAAMN,MAG7BrB,SACEqB,KAAKyC,WAAWuC,UAAY,GAC5BhF,KAAKkB,SAAS8D,UAAYhF,KAAKiF,KAE3B7G,OAAOqD,UACTrD,OAAOqD,SAASyD,gBAAgBlF,KAAKkB,SAAUlB,KAAKjB,KAGtDiB,KAAKyC,WAAW0C,YAAYnF,KAAKkB,SAASkE,QAAQC,WAAU,IAG9D1G,OAAOO,GACLT,EAAUY,QAAQW,KAAKjB,UAAWG,KDnV/B,SAAoBoG,GACzBpH,EAASoH,EAMT,MAAMC,EAAkBnH,OAAOoH,cACzBC,EAAgBF,GAAmBnH,OAAOoH,cAAcE,OAEzDH,GAAmBE,EACtBtH,IAEAC,OAAOuH,iBAAiB,qBAAsBxH,GC0UlDyH,CAAWnH,EAAUY"}